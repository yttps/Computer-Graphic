import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class ScanLinePolygon extends JFrame {

    public Color currentColor = Color.LIGHT_GRAY; //default color
    private int startX, startY, endX, endY; 

    public ScanLinePolygon() {

        DemoScanLine panel = new DemoScanLine(currentColor);
        add(panel, BorderLayout.CENTER);

        JButton colorButton = new JButton("Selected Color");
        
        colorButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                currentColor = JColorChooser.showDialog(null, "Choose a Color", currentColor);
                panel.setCurrentColor(currentColor); 
            }
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(colorButton);

        add(buttonPanel, BorderLayout.NORTH);

        panel.addMouseListener(new MouseAdapter() {
            
            public void mousePressed(MouseEvent e) {
                startX = e.getX(); 
                startY = e.getY(); 
            }

            public void mouseReleased(MouseEvent e) {
                endX = e.getX(); 
                endY = e.getY(); 
                panel.drawRectangle(startX, startY, endX, endY); 
            }
        });

        panel.addMouseMotionListener(new MouseMotionAdapter() {
            public void mouseDragged(MouseEvent e) {
                endX = e.getX(); 
                endY = e.getY(); 
                panel.drawRectangle(startX, startY, endX, endY); 
            }
        });
    }

    public static void main(String[] args) {
        ScanLinePolygon f = new ScanLinePolygon();
        f.setSize(750, 750);
        f.setVisible(true);
    }
}

class DemoScanLine extends JPanel {

    int num = 750;
    int LE[] = new int[num];
    int RE[] = new int[num];

    private Color currentColor;

    public DemoScanLine(Color color) {
        this.currentColor = color;
        setSize(750, 750);
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        fill(g);
    }

    void fill(Graphics g) {
        // Clear LE and RE arrays
        for (int i = 0; i < num; i++) {
            LE[i] = num;
            RE[i] = 0;
        }

        g.setColor(currentColor); 

        for (int y = 0; y < num; y++) {
            for (int x = LE[y]; x < RE[y]; x++) {
                g.drawLine(x, y, x, y);
            }
        }
    }

    void drawLineAndUpdate(int x1, int y1, int x2, int y2) {
        float x, M;
        int t;

        if (y1 > y2) {
            t = x1;
            x1 = x2;
            x2 = t;
            t = y1;
            y1 = y2;
            y2 = t;
        }

        if (y2 - y1 == 0) {
            M = (x2 - x1);
        } else {
            M = (float) (x2 - x1) / (float) (y2 - y1);
        }

        x = x1;
        for (int y = y1; y < y2; y++) {
            if (x < LE[y]) {
                LE[y] = (int) x;
            }
            if (x > RE[y]) {
                RE[y] = (int) x;
            }
            x = x + M;
        }
    }

    public void setCurrentColor(Color color) {
        this.currentColor = color;
        repaint(); 
    }

    // Method to draw a rectangle
    public void drawRectangle(int startX, int startY, int endX, int endY) {
        
        Graphics g = getGraphics();
        g.setColor(currentColor);
        int width = Math.abs(endX - startX); 
        int height = Math.abs(endY - startY); 
        int x = Math.min(startX, endX); 
        int y = Math.min(startY, endY); 
        
        g.clearRect(x, y, width, height);
        g.fillRect(x + 1, y + 1, width - 1, height - 1); 
        
        // Draw the rectangle outline
        g.drawRect(x, y, width, height); 
    }
}
